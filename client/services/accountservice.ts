
module AppDemo{
	
	export interface IAccountService {
		save(account:IAccount) : ng.IPromise<ng.IHttpPromiseCallbackArg<boolean>>;
		getAll():ng.IPromise<IAccount[]>;
		remove(id:number):ng.IPromise<number>;
	}
	
	class AccountService implements IAccountService {
		
		static $inject = ["$http","$q","dbService"];
		constructor(
			private $http : ng.IHttpService,
			private $q : ng.IQService,
			private $dbService
			) {
			
		}
		
		save(account:IAccount) : ng.IPromise<string> {
			var $dbService = this.$dbService;

			var deferred = this.$q.defer();
			var promise = deferred.promise;
			if(! account.dateOfBirth){
				deferred.reject("Please enter date of birth.");
			}
			else if(! account.isLegalAge()){
				deferred.reject("You must be at least 21 years old to register.");
			}
			else if(! account.name){
				deferred.reject("You must enter your name.");
			}
			else if(! account.lastName){
				deferred.reject("You must enter your last name.");
			}
			else if(! account.address){
				deferred.reject("You must enter your address.");
			}
			else{
				$dbService.last("users",'id_idx',1)
					.then(
						(lastAccounts:IAccount[]) => {
							var autoGeneratedAccountId:number = 1;
							if(lastAccounts && lastAccounts.length > 0){
								autoGeneratedAccountId = lastAccounts[0].id + 1;
							}
							
							account.id = autoGeneratedAccountId;
						}, 
						(error) => {
							deferred.reject(error);
						})
					.then(
						() => {
							$dbService.add("users", account)
								.then(
									(id) => {
										deferred.resolve("Account " + id + "saved.");
									},
									(error) => {
										deferred.reject(error);
									});
							});
			}; 
			return deferred.promise;
		}


		getAll(){
			return this.$dbService.all("users");
		}	
		
		remove(id:number){
			return this.$dbService.remove("users",id);
		}
	
	}
	
    angular
	    .module("AppDemo")
    	.service("AccountService", AccountService);
}